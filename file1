import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import json

CONTACTS_FILE = 'contacts.json'
TASKS_FILE = 'tasks.json'

contacts = []
favorites = []
tasks = []

def save_tasks():
    with open(TASKS_FILE, 'w') as f:
        json.dump(tasks, f)

def load_tasks():
    global tasks
    try:
        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)
    except FileNotFoundError:
        tasks = []

def save_contacts():
    with open(CONTACTS_FILE, 'w') as f:
        json.dump(contacts, f)

def load_contacts():
    global contacts
    try:
        with open(CONTACTS_FILE, 'r') as f:
            contacts = json.load(f)
    except FileNotFoundError:
        contacts = []

def add_task():
    def save_task():
        description = des_entry.get()
        duedate = due_entry.get()
        priority = pri_entry.get()

        if description and duedate and priority:
            tasks.append({'description': description, 'due': duedate, 'priority': priority})
            save_tasks()
            messagebox.showinfo("Done!", 'Task added!')
            add_task_window.destroy()
        else:
            messagebox.showinfo("Error", 'Some information is missing.')
        

    add_task_window = tk.Toplevel()
    add_task_window.title("Add a new Task")
    add_task_window.geometry('300x400')

    ttk.Label(add_task_window, text="Add a new Task!").pack(pady=10)

    ttk.Label(add_task_window, text="Description:").pack(pady=5)
    des_entry = ttk.Entry(add_task_window)
    des_entry.pack(pady=5)

    ttk.Label(add_task_window, text="Due Date:").pack(pady=5)
    due_entry = ttk.Entry(add_task_window)
    due_entry.pack(pady=5)

    ttk.Label(add_task_window, text="Priority:").pack(pady=5)
    pri_entry = ttk.Entry(add_task_window)
    pri_entry.pack(pady=5)

    ttk.Button(add_task_window, text="Click here to Save", command=save_task).pack(pady=10)
    

def display_tasks():
    load_tasks()  
    print("Tasks:", tasks)  
    display_window = tk.Toplevel()
    display_window.title("All the Tasks:")
    display_window.geometry('400x300')

    listbox = tk.Listbox(display_window)
    listbox.pack(fill=tk.BOTH, expand=True)

    for task in tasks:
        listbox.insert(tk.END, f"{task['description']} - {task['due']} - {task['priority']}")

def mark_task_complete():
    mark_complete_window = tk.Toplevel()
    mark_complete_window.title("Mark Task as Complete!")
    mark_complete_window.geometry('400x300')

    ttk.Label(mark_complete_window, text="Let's Mark!").pack(pady=5)

    listbox = tk.Listbox(mark_complete_window)
    listbox.pack(fill=tk.BOTH, expand=True)

    for idx, task in enumerate(tasks):
        listbox.insert(tk.END, f"{task['description']} - {task['due']} - {task['priority']}")

    def complete_task():
        selected = listbox.curselection()
        if selected:
            index = selected[0]
            comptask = tasks.pop(index)  
            save_tasks() 
            messagebox.showinfo("Success", f"Task '{comptask['description']}' marked as complete and removed!")
            mark_complete_window.destroy()
        else:
            messagebox.showerror("Error", "Please select a task.")

    ttk.Button(mark_complete_window, text="Mark as Complete", command=complete_task).pack(pady=10)

def add_contact():
    def save_contact():
        name = name_entry.get()
        phone = phone_entry.get()
        email = email_entry.get()
        address = address_entry.get()

        if name and phone and email and address:
            contacts.append({'name': name, 'phone': phone, 'email': email, 'address': address, 'favorite': False})
            save_contacts()
            messagebox.showinfo("Done!", "Contact has been added to the Directory!")
            add_contact_window.destroy()
        else:
            messagebox.showerror("Error", "Some information is missing.")

    add_contact_window = tk.Toplevel()
    add_contact_window.title("Add New Contact")
    add_contact_window.geometry('300x400')

    ttk.Label(add_contact_window, text="Let's add details!").pack(pady=10)

    ttk.Label(add_contact_window, text="Name:").pack(pady=5)
    name_entry = ttk.Entry(add_contact_window)
    name_entry.pack(pady=5)

    ttk.Label(add_contact_window, text="Phone:").pack(pady=5)
    phone_entry = ttk.Entry(add_contact_window)
    phone_entry.pack(pady=5)

    ttk.Label(add_contact_window, text="Email:").pack(pady=5)
    email_entry = ttk.Entry(add_contact_window)
    email_entry.pack(pady=5)

    ttk.Label(add_contact_window, text='Address:').pack(pady=5)
    address_entry = ttk.Entry(add_contact_window)
    address_entry.pack(pady=5)

    ttk.Button(add_contact_window, text="Click here to Save", command=save_contact).pack(pady=10)

def display_contacts():
    load_contacts() 
    print("Contacts:", contacts)  
    display_window = tk.Toplevel()
    display_window.title("All Contacts")
    display_window.geometry('400x300')

    listbox = tk.Listbox(display_window)
    listbox.pack(fill=tk.BOTH, expand=True)

    for contact in contacts:
        listbox.insert(tk.END, f"Name:{contact['name']}   Phone No.{contact['phone']}    Email:{contact['email']}    Address:{contact['address']}")

def display_favorites():
    display_window = tk.Toplevel()
    display_window.title("Favorite Contacts")
    display_window.geometry('400x300')

    listbox = tk.Listbox(display_window)
    listbox.pack(fill=tk.BOTH, expand=True)

    for contact in favorites:
        listbox.insert(tk.END, f"Name:{contact['name']}    Phone no.{contact['phone']}    Email:{contact['email']}    Address:{contact['address']}")

def mark_as_favorite():
    mark_favorite_window = tk.Toplevel()
    mark_favorite_window.title("Mark as Favorite")
    mark_favorite_window.geometry('300x400')

    listbox = tk.Listbox(mark_favorite_window)
    listbox.pack(fill=tk.BOTH, expand=True)

    for idx, contact in enumerate(contacts):
        listbox.insert(tk.END, f"{contact['name']} - {contact['phone']}")

    def mark_favorite():
        selected = listbox.curselection()
        if selected:
            index = selected[0]
            contact = contacts[index]
            contact['favorite'] = True
            if contact not in favorites:
                favorites.append(contact)
            save_contacts()  # Save contacts to file after marking favorite
            messagebox.showinfo("Success", f"{contact['name']} marked as favorite!")
            mark_favorite_window.destroy()
        else:
            messagebox.showerror("Error", "Please select a contact.")

    ttk.Button(mark_favorite_window, text="Mark as Favorite", command=mark_favorite).pack(pady=10)

def create_contact_window():
    extra_window = tk.Toplevel()
    extra_window.title("Contact List!")
    extra_window.configure(bg='light blue')
    extra_window.geometry('400x300')

    ttk.Label(extra_window, text="Choose 1 among the 4 options:").pack(pady=10)
    ttk.Button(extra_window, text="Click Here to add new Contacts", command=add_contact,style='Main.TButton',cursor='hand2').pack(expand=True)
    ttk.Button(extra_window, text="Click here to display all contacts including favorites", command=display_contacts,style='Main.TButton',cursor='hand2').pack(expand=True)
    ttk.Button(extra_window, text="Click here to mark contacts as favorites and view them", command=mark_as_favorite,style='Main.TButton',cursor='hand2').pack(expand=True)
    ttk.Button(extra_window, text="Click here to view favorite contacts", command=display_favorites,style='Main.TButton',cursor='hand2').pack(expand=True)

def create_task_window():
    extra_window = tk.Toplevel()
    extra_window.title("Daily Task Tracker!")
    extra_window.configure(bg='light pink')
    extra_window.geometry('400x300')

    ttk.Label(extra_window, text="Choose 1 among the 3 options:").pack(pady=10)
    ttk.Button(extra_window, text="Click Here to add new Tasks", command=add_task,style='Main.TButton',cursor='hand2').pack(expand=True)
    ttk.Button(extra_window, text="Click here to display all tasks", command=display_tasks,style='Main.TButton',cursor='hand2').pack(expand=True)
    ttk.Button(extra_window, text="Click here to mark tasks as complete and delete them",command=mark_task_complete,style='Main.TButton',cursor='hand2').pack(expand=True)

def are_you_sure():
    if messagebox.askquestion("Confirmation", "Do you really want to Exit?") == 'yes':
        save_contacts()
        save_tasks()
        root.destroy()

root = tk.Tk()
root.geometry('600x400')
root.title("Smart Hub")
root.configure(bg='dark blue')

style = ttk.Style()
style.configure('Main.TButton', font=('helvatica', 12), foreground='blue',background='black', padding=10, relief='raised', borderwidth=4,padx=10,pady=10)

# Create the 3D button
button1 = ttk.Button(root, text="Go to:CONTACT LIST", command=create_contact_window, style='Main.TButton',cursor='hand2')
button1.pack(expand=True)


button2 = ttk.Button(root, text="Go to:DAILY TASK TRACKER", command=create_task_window,style='Main.TButton',cursor='hand2')
button2.pack(expand=True)


button3 = ttk.Button(root, text="EXIT", command=are_you_sure, style='Main.TButton',cursor='hand2')
button3.pack(expand=True)


root.mainloop()
